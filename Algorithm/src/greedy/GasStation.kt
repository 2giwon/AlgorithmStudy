package greedy

/*
    134. Gas Station

    순환 경로를 따라 n개의 주유소가 있으며, i번째 주유소의 휘발유 양은 gas[i]입니다.

    당신은 무제한 주유 탱크가 있는 자동차를 가지고 있으며, i 번째 주유소에서 다음 (i + 1)번째 주유소까지 이동하는 데 cost[i]의 주유비가 든다고 가정합니다. 주유소 중 한 곳에서 빈 탱크로 여행을 시작합니다.

    두 개의 정수 배열 gas와 cost가 주어졌을 때, 시계 방향으로 회로를 한 바퀴 돌 수 있으면 시작 주유소의 인덱스를 반환하고, 그렇지 않으면 -1을 반환합니다. 해가 존재하면 고유한 해가 보장됩니다.



    예제 1:

    입력: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
    Output: 3
    설명:
    스테이션 3(인덱스 3)에서 시작하여 4 단위의 가스를 채웁니다. 탱크 = 0 + 4 = 4
    스테이션 4로 이동합니다. 탱크 = 4 - 1 + 5 = 8
    스테이션 0으로 이동합니다. 탱크 = 8 - 2 + 1 = 7
    스테이션 1로 이동합니다. 탱크 = 7 - 3 + 2 = 6
    스테이션 2로 이동합니다. 내 탱크 = 6 - 4 + 3 = 5
    역 3으로 이동합니다. 비용은 5입니다. 가스는 스테이션 3으로 돌아가기에 충분합니다.
    따라서 3을 시작 인덱스로 반환합니다.

    예제 2:

    입력: gas = [2,3,4], cost = [3,4,3]
    Output: -1
    설명:
    다음 스테이션으로 이동하기 위한 가스가 충분하지 않으므로 스테이션 0 또는 1에서 시작할 수 없습니다.
    주유소 2에서 시작하여 4 단위의 가스를 채웁시다. 탱크 = 0 + 4 = 4
    스테이션 0으로 이동합니다. 탱크 = 4 - 3 + 2 = 3
    스테이션 1로 이동합니다. 내 탱크 = 3 - 3 + 3 = 3
    스테이션 2로 돌아가려면 4 유닛의 가스가 필요하지만 3 유닛만 있으므로 다시 이동할 수 없습니다.
    따라서 어디서 시작하든 서킷을 한 번도 돌아갈 수 없습니다.
 */
fun main(args: Array<String>) {
    println(GasStation().solution(gas = intArrayOf(1, 2, 3, 4, 5), cost = intArrayOf(3, 4, 5, 1, 2)))
}

class GasStation {
    fun solution(gas: IntArray, cost: IntArray): Int {
        return 0
    }
}
